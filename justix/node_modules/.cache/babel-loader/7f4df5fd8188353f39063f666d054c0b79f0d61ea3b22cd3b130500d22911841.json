{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import styles from './Cadastro.module.css';\n// import Header from '../../components/Header';\n// import Footer from '../../components/Footer';\n// import ContainerHome from '../../components/ContainerHome';\n\n// function Cadastro() {\n//     const navigate = useNavigate();\n\n//     const [formData, setFormData] = useState({\n//         nome: '',\n//         cpf: '',\n//         email: '',\n//         telefone: '',\n//         senha: '',\n//         confirmarSenha: ''\n//     });\n\n//     const [errors, setErrors] = useState({\n//         nome: '',\n//         cpf: '',\n//         email: '',\n//         telefone: '',\n//         senha: '',\n//         confirmarSenha: ''\n//     });\n\n//     const [submitStatus, setSubmitStatus] = useState({\n//         message: '',\n//         type: ''\n//     });\n\n//     const formatCPF = (value) => {\n//         return value\n//             .replace(/\\D/g, '')\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\n//             .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\n//             .replace(/(-\\d{2})\\d+?$/, '$1');\n//     };\n\n//     const formatTelefone = (value) => {\n//         return value\n//             .replace(/\\D/g, '')\n//             .replace(/(\\d{2})(\\d)/, '($1) $2')\n//             .replace(/(\\d{5})(\\d)/, '$1-$2')\n//             .replace(/(-\\d{4})\\d+?$/, '$1');\n//     };\n\n//     const validateField = (name, value) => {\n//         switch (name) {\n//             case 'nome':\n//                 return value.length < 3 ? 'Nome deve ter pelo menos 3 caracteres' : '';\n//             case 'cpf':\n//                 return value.replace(/\\D/g, '').length !== 11 \n//                     ? 'CPF deve ter 11 dígitos' \n//                     : '';\n//             case 'email':\n//                 return !value.includes('@') || !value.includes('.com')\n//                     ? 'Email deve conter @ e .com'\n//                     : '';\n//             case 'telefone':\n//                 return value.replace(/\\D/g, '').length < 11\n//                     ? 'Telefone deve ter 11 dígitos'\n//                     : '';\n//             case 'senha':\n//                 return value.length < 6\n//                     ? 'Senha deve ter pelo menos 6 caracteres'\n//                     : '';\n//             case 'confirmarSenha':\n//                 return value !== formData.senha\n//                     ? 'As senhas não coincidem'\n//                     : '';\n//             default:\n//                 return '';\n//         }\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { id, value } = e.target;\n//         let formattedValue = value;\n\n//         if (id === 'cpf') {\n//             formattedValue = formatCPF(value);\n//         } else if (id === 'telefone') {\n//             formattedValue = formatTelefone(value);\n//         }\n\n//         setFormData((prevState) => ({\n//             ...prevState,\n//             [id]: formattedValue\n//         }));\n\n//         const error = validateField(id, formattedValue);\n//         setErrors((prevState) => ({\n//             ...prevState,\n//             [id]: error\n//         }));\n\n//         if (id === 'senha') {\n//             const confirmarSenhaError = formData.confirmarSenha\n//                 ? validateField('confirmarSenha', formData.confirmarSenha)\n//                 : '';\n//             setErrors((prevState) => ({\n//                 ...prevState,\n//                 confirmarSenha: confirmarSenhaError\n//             }));\n//         }\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         try {\n//             console.log('Enviando dados:', formData); // Log dos dados enviados\n\n//             const response = await fetch('http://localhost:3001/usuarios', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     nome: formData.nome,\n//                     cpf: formData.cpf.replace(/\\D/g, ''),\n//                     email: formData.email,\n//                     telefone: formData.telefone.replace(/\\D/g, ''),\n//                     senha: formData.senha\n//                 })\n//             });\n\n//             const data = await response.json();\n//             console.log('Resposta do servidor:', data); // Log da resposta\n\n//             if (response.ok) {\n//                 setSubmitStatus({\n//                     message: 'Cadastro realizado com sucesso!',\n//                     type: 'success'\n//                 });\n//                 setTimeout(() => navigate('/login'), 2000);\n//             } else {\n//                 throw new Error(data.error || 'Erro ao realizar cadastro');\n//             }\n//         } catch (error) {\n//             console.error('Erro no cadastro:', error);\n//             setSubmitStatus({\n//                 message: error.message || 'Erro ao conectar com o servidor',\n//                 type: 'error'\n//             });\n//         }\n//     };\n//     return (\n\n//             <>\n//             <Header> \n//             <div className={styles.navleft}>\n//             <Link to=\"/login\" className={styles.navlinksl}>Login</Link>\n//             <Link to=\"/info\" className={styles.navlinks}>Sobre nós</Link>\n//             </div>\n//             </Header>\n//             <ContainerHome>\n//                 <section className={styles.cadastroSection}>\n//                     <div className={styles.cadastroContainer}>\n//                         <Link to=\"/\" className={styles.backButton}>← Voltar</Link>\n//                         <h2 className={styles.title}>Cadastro</h2>\n\n//                         {submitStatus.message && (\n//                             <div className={`${styles.statusMessage} ${styles[submitStatus.type]}`}>\n//                                 {submitStatus.message}\n//                             </div>\n//                         )}\n\n//                         <form onSubmit={handleSubmit} className={styles.cadastroForm}>\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"nome\">Nome:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"nome\"\n//                                     value={formData.nome}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.nome && <span className={styles.errorText}>{errors.nome}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"cpf\">CPF:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"cpf\"\n//                                     value={formData.cpf}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                     maxLength=\"14\"\n//                                 />\n//                                 {errors.cpf && <span className={styles.errorText}>{errors.cpf}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"email\">E-mail:</label>\n//                                 <input\n//                                     type=\"email\"\n//                                     id=\"email\"\n//                                     value={formData.email}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.email && <span className={styles.errorText}>{errors.email}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"telefone\">Telefone:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"telefone\"\n//                                     value={formData.telefone}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                     maxLength=\"15\"\n//                                 />\n//                                 {errors.telefone && <span className={styles.errorText}>{errors.telefone}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"senha\">Senha:</label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"senha\"\n//                                     value={formData.senha}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.senha && <span className={styles.errorText}>{errors.senha}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"confirmarSenha\">Confirmar Senha:</label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"confirmarSenha\"\n//                                     value={formData.confirmarSenha}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.confirmarSenha && (\n//                                     <span className={styles.errorText}>{errors.confirmarSenha}</span>\n//                                 )}\n//                             </div>\n\n//                             <button type=\"submit\" className={styles.submitButton}>Cadastrar</button>\n//                         </form>\n//                     </div>\n//                 </section>\n//             </ContainerHome>\n//             <Footer />\n//         </>\n//     );\n// }\n\n// export default Cadastro;","map":{"version":3,"names":[],"sources":["C:/Users/vinic/OneDrive/Área de Trabalho/React project/justix/src/pages/Cadastro/index.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n// import styles from './Cadastro.module.css';\r\n// import Header from '../../components/Header';\r\n// import Footer from '../../components/Footer';\r\n// import ContainerHome from '../../components/ContainerHome';\r\n\r\n// function Cadastro() {\r\n//     const navigate = useNavigate();\r\n\r\n//     const [formData, setFormData] = useState({\r\n//         nome: '',\r\n//         cpf: '',\r\n//         email: '',\r\n//         telefone: '',\r\n//         senha: '',\r\n//         confirmarSenha: ''\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({\r\n//         nome: '',\r\n//         cpf: '',\r\n//         email: '',\r\n//         telefone: '',\r\n//         senha: '',\r\n//         confirmarSenha: ''\r\n//     });\r\n\r\n//     const [submitStatus, setSubmitStatus] = useState({\r\n//         message: '',\r\n//         type: ''\r\n//     });\r\n\r\n//     const formatCPF = (value) => {\r\n//         return value\r\n//             .replace(/\\D/g, '')\r\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n//             .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n//             .replace(/(-\\d{2})\\d+?$/, '$1');\r\n//     };\r\n\r\n//     const formatTelefone = (value) => {\r\n//         return value\r\n//             .replace(/\\D/g, '')\r\n//             .replace(/(\\d{2})(\\d)/, '($1) $2')\r\n//             .replace(/(\\d{5})(\\d)/, '$1-$2')\r\n//             .replace(/(-\\d{4})\\d+?$/, '$1');\r\n//     };\r\n\r\n//     const validateField = (name, value) => {\r\n//         switch (name) {\r\n//             case 'nome':\r\n//                 return value.length < 3 ? 'Nome deve ter pelo menos 3 caracteres' : '';\r\n//             case 'cpf':\r\n//                 return value.replace(/\\D/g, '').length !== 11 \r\n//                     ? 'CPF deve ter 11 dígitos' \r\n//                     : '';\r\n//             case 'email':\r\n//                 return !value.includes('@') || !value.includes('.com')\r\n//                     ? 'Email deve conter @ e .com'\r\n//                     : '';\r\n//             case 'telefone':\r\n//                 return value.replace(/\\D/g, '').length < 11\r\n//                     ? 'Telefone deve ter 11 dígitos'\r\n//                     : '';\r\n//             case 'senha':\r\n//                 return value.length < 6\r\n//                     ? 'Senha deve ter pelo menos 6 caracteres'\r\n//                     : '';\r\n//             case 'confirmarSenha':\r\n//                 return value !== formData.senha\r\n//                     ? 'As senhas não coincidem'\r\n//                     : '';\r\n//             default:\r\n//                 return '';\r\n//         }\r\n//     };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { id, value } = e.target;\r\n//         let formattedValue = value;\r\n\r\n//         if (id === 'cpf') {\r\n//             formattedValue = formatCPF(value);\r\n//         } else if (id === 'telefone') {\r\n//             formattedValue = formatTelefone(value);\r\n//         }\r\n\r\n//         setFormData((prevState) => ({\r\n//             ...prevState,\r\n//             [id]: formattedValue\r\n//         }));\r\n\r\n//         const error = validateField(id, formattedValue);\r\n//         setErrors((prevState) => ({\r\n//             ...prevState,\r\n//             [id]: error\r\n//         }));\r\n\r\n//         if (id === 'senha') {\r\n//             const confirmarSenhaError = formData.confirmarSenha\r\n//                 ? validateField('confirmarSenha', formData.confirmarSenha)\r\n//                 : '';\r\n//             setErrors((prevState) => ({\r\n//                 ...prevState,\r\n//                 confirmarSenha: confirmarSenhaError\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n        \r\n//         try {\r\n//             console.log('Enviando dados:', formData); // Log dos dados enviados\r\n    \r\n//             const response = await fetch('http://localhost:3001/usuarios', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     nome: formData.nome,\r\n//                     cpf: formData.cpf.replace(/\\D/g, ''),\r\n//                     email: formData.email,\r\n//                     telefone: formData.telefone.replace(/\\D/g, ''),\r\n//                     senha: formData.senha\r\n//                 })\r\n//             });\r\n    \r\n//             const data = await response.json();\r\n//             console.log('Resposta do servidor:', data); // Log da resposta\r\n    \r\n//             if (response.ok) {\r\n//                 setSubmitStatus({\r\n//                     message: 'Cadastro realizado com sucesso!',\r\n//                     type: 'success'\r\n//                 });\r\n//                 setTimeout(() => navigate('/login'), 2000);\r\n//             } else {\r\n//                 throw new Error(data.error || 'Erro ao realizar cadastro');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Erro no cadastro:', error);\r\n//             setSubmitStatus({\r\n//                 message: error.message || 'Erro ao conectar com o servidor',\r\n//                 type: 'error'\r\n//             });\r\n//         }\r\n//     };\r\n//     return (\r\n       \r\n//             <>\r\n//             <Header> \r\n//             <div className={styles.navleft}>\r\n//             <Link to=\"/login\" className={styles.navlinksl}>Login</Link>\r\n//             <Link to=\"/info\" className={styles.navlinks}>Sobre nós</Link>\r\n//             </div>\r\n//             </Header>\r\n//             <ContainerHome>\r\n//                 <section className={styles.cadastroSection}>\r\n//                     <div className={styles.cadastroContainer}>\r\n//                         <Link to=\"/\" className={styles.backButton}>← Voltar</Link>\r\n//                         <h2 className={styles.title}>Cadastro</h2>\r\n\r\n//                         {submitStatus.message && (\r\n//                             <div className={`${styles.statusMessage} ${styles[submitStatus.type]}`}>\r\n//                                 {submitStatus.message}\r\n//                             </div>\r\n//                         )}\r\n\r\n//                         <form onSubmit={handleSubmit} className={styles.cadastroForm}>\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"nome\">Nome:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"nome\"\r\n//                                     value={formData.nome}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.nome && <span className={styles.errorText}>{errors.nome}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"cpf\">CPF:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"cpf\"\r\n//                                     value={formData.cpf}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                     maxLength=\"14\"\r\n//                                 />\r\n//                                 {errors.cpf && <span className={styles.errorText}>{errors.cpf}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"email\">E-mail:</label>\r\n//                                 <input\r\n//                                     type=\"email\"\r\n//                                     id=\"email\"\r\n//                                     value={formData.email}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.email && <span className={styles.errorText}>{errors.email}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"telefone\">Telefone:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"telefone\"\r\n//                                     value={formData.telefone}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                     maxLength=\"15\"\r\n//                                 />\r\n//                                 {errors.telefone && <span className={styles.errorText}>{errors.telefone}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"senha\">Senha:</label>\r\n//                                 <input\r\n//                                     type=\"password\"\r\n//                                     id=\"senha\"\r\n//                                     value={formData.senha}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.senha && <span className={styles.errorText}>{errors.senha}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"confirmarSenha\">Confirmar Senha:</label>\r\n//                                 <input\r\n//                                     type=\"password\"\r\n//                                     id=\"confirmarSenha\"\r\n//                                     value={formData.confirmarSenha}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.confirmarSenha && (\r\n//                                     <span className={styles.errorText}>{errors.confirmarSenha}</span>\r\n//                                 )}\r\n//                             </div>\r\n\r\n//                             <button type=\"submit\" className={styles.submitButton}>Cadastrar</button>\r\n//                         </form>\r\n//                     </div>\r\n//                 </section>\r\n//             </ContainerHome>\r\n//             <Footer />\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default Cadastro;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}