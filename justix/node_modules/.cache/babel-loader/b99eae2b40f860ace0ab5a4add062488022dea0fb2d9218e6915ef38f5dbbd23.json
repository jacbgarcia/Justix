{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinic\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\React project\\\\justix\\\\src\\\\pages\\\\Cadastro\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import styles from './Cadastro.module.css';\n// import Header from '../../components/Header';\n// import Footer from '../../components/Footer';\n// import ContainerHome from '../../components/ContainerHome';\n\n// function Cadastro() {\n//     const navigate = useNavigate();\n\n//     const [formData, setFormData] = useState({\n//         nome: '',\n//         cpf: '',\n//         email: '',\n//         telefone: '',\n//         senha: '',\n//         confirmarSenha: ''\n//     });\n\n//     const [errors, setErrors] = useState({\n//         nome: '',\n//         cpf: '',\n//         email: '',\n//         telefone: '',\n//         senha: '',\n//         confirmarSenha: ''\n//     });\n\n//     const [submitStatus, setSubmitStatus] = useState({\n//         message: '',\n//         type: ''\n//     });\n\n//     const formatCPF = (value) => {\n//         return value\n//             .replace(/\\D/g, '')\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\n//             .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\n//             .replace(/(-\\d{2})\\d+?$/, '$1');\n//     };\n\n//     const formatTelefone = (value) => {\n//         return value\n//             .replace(/\\D/g, '')\n//             .replace(/(\\d{2})(\\d)/, '($1) $2')\n//             .replace(/(\\d{5})(\\d)/, '$1-$2')\n//             .replace(/(-\\d{4})\\d+?$/, '$1');\n//     };\n\n//     const validateField = (name, value) => {\n//         switch (name) {\n//             case 'nome':\n//                 return value.length < 3 ? 'Nome deve ter pelo menos 3 caracteres' : '';\n//             case 'cpf':\n//                 return value.replace(/\\D/g, '').length !== 11 \n//                     ? 'CPF deve ter 11 dígitos' \n//                     : '';\n//             case 'email':\n//                 return !value.includes('@') || !value.includes('.com')\n//                     ? 'Email deve conter @ e .com'\n//                     : '';\n//             case 'telefone':\n//                 return value.replace(/\\D/g, '').length < 11\n//                     ? 'Telefone deve ter 11 dígitos'\n//                     : '';\n//             case 'senha':\n//                 return value.length < 6\n//                     ? 'Senha deve ter pelo menos 6 caracteres'\n//                     : '';\n//             case 'confirmarSenha':\n//                 return value !== formData.senha\n//                     ? 'As senhas não coincidem'\n//                     : '';\n//             default:\n//                 return '';\n//         }\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { id, value } = e.target;\n//         let formattedValue = value;\n\n//         if (id === 'cpf') {\n//             formattedValue = formatCPF(value);\n//         } else if (id === 'telefone') {\n//             formattedValue = formatTelefone(value);\n//         }\n\n//         setFormData((prevState) => ({\n//             ...prevState,\n//             [id]: formattedValue\n//         }));\n\n//         const error = validateField(id, formattedValue);\n//         setErrors((prevState) => ({\n//             ...prevState,\n//             [id]: error\n//         }));\n\n//         if (id === 'senha') {\n//             const confirmarSenhaError = formData.confirmarSenha\n//                 ? validateField('confirmarSenha', formData.confirmarSenha)\n//                 : '';\n//             setErrors((prevState) => ({\n//                 ...prevState,\n//                 confirmarSenha: confirmarSenhaError\n//             }));\n//         }\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         try {\n//             console.log('Enviando dados:', formData); // Log dos dados enviados\n\n//             const response = await fetch('http://localhost:3001/usuarios', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     nome: formData.nome,\n//                     cpf: formData.cpf.replace(/\\D/g, ''),\n//                     email: formData.email,\n//                     telefone: formData.telefone.replace(/\\D/g, ''),\n//                     senha: formData.senha\n//                 })\n//             });\n\n//             const data = await response.json();\n//             console.log('Resposta do servidor:', data); // Log da resposta\n\n//             if (response.ok) {\n//                 setSubmitStatus({\n//                     message: 'Cadastro realizado com sucesso!',\n//                     type: 'success'\n//                 });\n//                 setTimeout(() => navigate('/login'), 2000);\n//             } else {\n//                 throw new Error(data.error || 'Erro ao realizar cadastro');\n//             }\n//         } catch (error) {\n//             console.error('Erro no cadastro:', error);\n//             setSubmitStatus({\n//                 message: error.message || 'Erro ao conectar com o servidor',\n//                 type: 'error'\n//             });\n//         }\n//     };\n//     return (\n\n//             <>\n//             <Header> \n//             <div className={styles.navleft}>\n//             <Link to=\"/login\" className={styles.navlinksl}>Login</Link>\n//             <Link to=\"/info\" className={styles.navlinks}>Sobre nós</Link>\n//             </div>\n//             </Header>\n//             <ContainerHome>\n//                 <section className={styles.cadastroSection}>\n//                     <div className={styles.cadastroContainer}>\n//                         <Link to=\"/\" className={styles.backButton}>← Voltar</Link>\n//                         <h2 className={styles.title}>Cadastro</h2>\n\n//                         {submitStatus.message && (\n//                             <div className={`${styles.statusMessage} ${styles[submitStatus.type]}`}>\n//                                 {submitStatus.message}\n//                             </div>\n//                         )}\n\n//                         <form onSubmit={handleSubmit} className={styles.cadastroForm}>\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"nome\">Nome:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"nome\"\n//                                     value={formData.nome}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.nome && <span className={styles.errorText}>{errors.nome}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"cpf\">CPF:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"cpf\"\n//                                     value={formData.cpf}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                     maxLength=\"14\"\n//                                 />\n//                                 {errors.cpf && <span className={styles.errorText}>{errors.cpf}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"email\">E-mail:</label>\n//                                 <input\n//                                     type=\"email\"\n//                                     id=\"email\"\n//                                     value={formData.email}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.email && <span className={styles.errorText}>{errors.email}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"telefone\">Telefone:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"telefone\"\n//                                     value={formData.telefone}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                     maxLength=\"15\"\n//                                 />\n//                                 {errors.telefone && <span className={styles.errorText}>{errors.telefone}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"senha\">Senha:</label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"senha\"\n//                                     value={formData.senha}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.senha && <span className={styles.errorText}>{errors.senha}</span>}\n//                             </div>\n\n//                             <div className={styles.formGroup}>\n//                                 <label htmlFor=\"confirmarSenha\">Confirmar Senha:</label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"confirmarSenha\"\n//                                     value={formData.confirmarSenha}\n//                                     onChange={handleInputChange}\n//                                     required\n//                                 />\n//                                 {errors.confirmarSenha && (\n//                                     <span className={styles.errorText}>{errors.confirmarSenha}</span>\n//                                 )}\n//                             </div>\n\n//                             <button type=\"submit\" className={styles.submitButton}>Cadastrar</button>\n//                         </form>\n//                     </div>\n//                 </section>\n//             </ContainerHome>\n//             <Footer />\n//         </>\n//     );\n// }\n\n// export default Cadastro;\n\n// Cadastro.js\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport styles from './Cadastro.module.css';\nimport Header from '../../components/Header';\nimport Footer from '../../components/Footer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Cadastro() {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    nome: '',\n    cpf: '',\n    email: '',\n    telefone: '',\n    senha: '',\n    confirmarSenha: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [submitStatus, setSubmitStatus] = useState({});\n  const [isSidebarVisible, setSidebarVisible] = useState(false);\n  const toggleSidebar = () => setSidebarVisible(!isSidebarVisible);\n  const formatCPF = value => {\n    return value.replace(/\\D/g, '').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d{1,2})/, '$1-$2').replace(/(-\\d{2})\\d+?$/, '$1');\n  };\n  const formatTelefone = value => {\n    return value.replace(/\\D/g, '').replace(/(\\d{2})(\\d)/, '($1) $2').replace(/(\\d{5})(\\d)/, '$1-$2').replace(/(-\\d{4})\\d+?$/, '$1');\n  };\n  const handleInputChange = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    const formattedValue = id === 'cpf' ? formatCPF(value) : id === 'telefone' ? formatTelefone(value) : value;\n    setFormData(prev => ({\n      ...prev,\n      [id]: formattedValue\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3001/usuarios', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...formData,\n          cpf: formData.cpf.replace(/\\D/g, ''),\n          telefone: formData.telefone.replace(/\\D/g, '')\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSubmitStatus({\n          message: 'Cadastro realizado com sucesso!',\n          type: 'success'\n        });\n        setTimeout(() => navigate('/login'), 2000);\n      } else {\n        throw new Error(data.error || 'Erro ao realizar cadastro');\n      }\n    } catch (error) {\n      setSubmitStatus({\n        message: error.message || 'Erro ao conectar com o servidor',\n        type: 'error'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      toggleSidebar: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.overlay} ${isSidebarVisible ? styles.overlayVisible : ''}`,\n      onClick: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.sidebar} ${isSidebarVisible ? styles.sidebarVisible : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sidebarHeader,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: styles.closeButton,\n          onClick: toggleSidebar,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: styles.title,\n          children: \"Cadastro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), submitStatus.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.statusMessage} ${styles[submitStatus.type]}`,\n        children: submitStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: styles.cadastroForm,\n        children: [['nome', 'cpf', 'email', 'telefone', 'senha', 'confirmarSenha'].map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: field,\n            children: [field.charAt(0).toUpperCase() + field.slice(1), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === 'senha' || field === 'confirmarSenha' ? 'password' : 'text',\n            id: field,\n            value: formData[field],\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 29\n          }, this), errors[field] && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.errorText,\n            children: errors[field]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 47\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: styles.submitButton,\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Cadastro, \"wruqtJt8U8pNGVlI4cq6rsSHlGY=\", false, function () {\n  return [useNavigate];\n});\n_c = Cadastro;\nexport default Cadastro;\nvar _c;\n$RefreshReg$(_c, \"Cadastro\");","map":{"version":3,"names":["React","useState","Link","useNavigate","styles","Header","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","Cadastro","_s","navigate","formData","setFormData","nome","cpf","email","telefone","senha","confirmarSenha","errors","setErrors","submitStatus","setSubmitStatus","isSidebarVisible","setSidebarVisible","toggleSidebar","formatCPF","value","replace","formatTelefone","handleInputChange","e","id","target","formattedValue","prev","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","type","setTimeout","Error","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","overlay","overlayVisible","onClick","sidebar","sidebarVisible","sidebarHeader","to","closeButton","title","statusMessage","onSubmit","cadastroForm","map","field","formGroup","htmlFor","charAt","toUpperCase","slice","onChange","required","errorText","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/vinic/OneDrive/Área de Trabalho/React project/justix/src/pages/Cadastro/index.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n// import styles from './Cadastro.module.css';\r\n// import Header from '../../components/Header';\r\n// import Footer from '../../components/Footer';\r\n// import ContainerHome from '../../components/ContainerHome';\r\n\r\n// function Cadastro() {\r\n//     const navigate = useNavigate();\r\n\r\n//     const [formData, setFormData] = useState({\r\n//         nome: '',\r\n//         cpf: '',\r\n//         email: '',\r\n//         telefone: '',\r\n//         senha: '',\r\n//         confirmarSenha: ''\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({\r\n//         nome: '',\r\n//         cpf: '',\r\n//         email: '',\r\n//         telefone: '',\r\n//         senha: '',\r\n//         confirmarSenha: ''\r\n//     });\r\n\r\n//     const [submitStatus, setSubmitStatus] = useState({\r\n//         message: '',\r\n//         type: ''\r\n//     });\r\n\r\n//     const formatCPF = (value) => {\r\n//         return value\r\n//             .replace(/\\D/g, '')\r\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n//             .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n//             .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n//             .replace(/(-\\d{2})\\d+?$/, '$1');\r\n//     };\r\n\r\n//     const formatTelefone = (value) => {\r\n//         return value\r\n//             .replace(/\\D/g, '')\r\n//             .replace(/(\\d{2})(\\d)/, '($1) $2')\r\n//             .replace(/(\\d{5})(\\d)/, '$1-$2')\r\n//             .replace(/(-\\d{4})\\d+?$/, '$1');\r\n//     };\r\n\r\n//     const validateField = (name, value) => {\r\n//         switch (name) {\r\n//             case 'nome':\r\n//                 return value.length < 3 ? 'Nome deve ter pelo menos 3 caracteres' : '';\r\n//             case 'cpf':\r\n//                 return value.replace(/\\D/g, '').length !== 11 \r\n//                     ? 'CPF deve ter 11 dígitos' \r\n//                     : '';\r\n//             case 'email':\r\n//                 return !value.includes('@') || !value.includes('.com')\r\n//                     ? 'Email deve conter @ e .com'\r\n//                     : '';\r\n//             case 'telefone':\r\n//                 return value.replace(/\\D/g, '').length < 11\r\n//                     ? 'Telefone deve ter 11 dígitos'\r\n//                     : '';\r\n//             case 'senha':\r\n//                 return value.length < 6\r\n//                     ? 'Senha deve ter pelo menos 6 caracteres'\r\n//                     : '';\r\n//             case 'confirmarSenha':\r\n//                 return value !== formData.senha\r\n//                     ? 'As senhas não coincidem'\r\n//                     : '';\r\n//             default:\r\n//                 return '';\r\n//         }\r\n//     };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { id, value } = e.target;\r\n//         let formattedValue = value;\r\n\r\n//         if (id === 'cpf') {\r\n//             formattedValue = formatCPF(value);\r\n//         } else if (id === 'telefone') {\r\n//             formattedValue = formatTelefone(value);\r\n//         }\r\n\r\n//         setFormData((prevState) => ({\r\n//             ...prevState,\r\n//             [id]: formattedValue\r\n//         }));\r\n\r\n//         const error = validateField(id, formattedValue);\r\n//         setErrors((prevState) => ({\r\n//             ...prevState,\r\n//             [id]: error\r\n//         }));\r\n\r\n//         if (id === 'senha') {\r\n//             const confirmarSenhaError = formData.confirmarSenha\r\n//                 ? validateField('confirmarSenha', formData.confirmarSenha)\r\n//                 : '';\r\n//             setErrors((prevState) => ({\r\n//                 ...prevState,\r\n//                 confirmarSenha: confirmarSenhaError\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n        \r\n//         try {\r\n//             console.log('Enviando dados:', formData); // Log dos dados enviados\r\n    \r\n//             const response = await fetch('http://localhost:3001/usuarios', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     nome: formData.nome,\r\n//                     cpf: formData.cpf.replace(/\\D/g, ''),\r\n//                     email: formData.email,\r\n//                     telefone: formData.telefone.replace(/\\D/g, ''),\r\n//                     senha: formData.senha\r\n//                 })\r\n//             });\r\n    \r\n//             const data = await response.json();\r\n//             console.log('Resposta do servidor:', data); // Log da resposta\r\n    \r\n//             if (response.ok) {\r\n//                 setSubmitStatus({\r\n//                     message: 'Cadastro realizado com sucesso!',\r\n//                     type: 'success'\r\n//                 });\r\n//                 setTimeout(() => navigate('/login'), 2000);\r\n//             } else {\r\n//                 throw new Error(data.error || 'Erro ao realizar cadastro');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Erro no cadastro:', error);\r\n//             setSubmitStatus({\r\n//                 message: error.message || 'Erro ao conectar com o servidor',\r\n//                 type: 'error'\r\n//             });\r\n//         }\r\n//     };\r\n//     return (\r\n       \r\n//             <>\r\n//             <Header> \r\n//             <div className={styles.navleft}>\r\n//             <Link to=\"/login\" className={styles.navlinksl}>Login</Link>\r\n//             <Link to=\"/info\" className={styles.navlinks}>Sobre nós</Link>\r\n//             </div>\r\n//             </Header>\r\n//             <ContainerHome>\r\n//                 <section className={styles.cadastroSection}>\r\n//                     <div className={styles.cadastroContainer}>\r\n//                         <Link to=\"/\" className={styles.backButton}>← Voltar</Link>\r\n//                         <h2 className={styles.title}>Cadastro</h2>\r\n\r\n//                         {submitStatus.message && (\r\n//                             <div className={`${styles.statusMessage} ${styles[submitStatus.type]}`}>\r\n//                                 {submitStatus.message}\r\n//                             </div>\r\n//                         )}\r\n\r\n//                         <form onSubmit={handleSubmit} className={styles.cadastroForm}>\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"nome\">Nome:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"nome\"\r\n//                                     value={formData.nome}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.nome && <span className={styles.errorText}>{errors.nome}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"cpf\">CPF:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"cpf\"\r\n//                                     value={formData.cpf}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                     maxLength=\"14\"\r\n//                                 />\r\n//                                 {errors.cpf && <span className={styles.errorText}>{errors.cpf}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"email\">E-mail:</label>\r\n//                                 <input\r\n//                                     type=\"email\"\r\n//                                     id=\"email\"\r\n//                                     value={formData.email}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.email && <span className={styles.errorText}>{errors.email}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"telefone\">Telefone:</label>\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     id=\"telefone\"\r\n//                                     value={formData.telefone}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                     maxLength=\"15\"\r\n//                                 />\r\n//                                 {errors.telefone && <span className={styles.errorText}>{errors.telefone}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"senha\">Senha:</label>\r\n//                                 <input\r\n//                                     type=\"password\"\r\n//                                     id=\"senha\"\r\n//                                     value={formData.senha}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.senha && <span className={styles.errorText}>{errors.senha}</span>}\r\n//                             </div>\r\n\r\n//                             <div className={styles.formGroup}>\r\n//                                 <label htmlFor=\"confirmarSenha\">Confirmar Senha:</label>\r\n//                                 <input\r\n//                                     type=\"password\"\r\n//                                     id=\"confirmarSenha\"\r\n//                                     value={formData.confirmarSenha}\r\n//                                     onChange={handleInputChange}\r\n//                                     required\r\n//                                 />\r\n//                                 {errors.confirmarSenha && (\r\n//                                     <span className={styles.errorText}>{errors.confirmarSenha}</span>\r\n//                                 )}\r\n//                             </div>\r\n\r\n//                             <button type=\"submit\" className={styles.submitButton}>Cadastrar</button>\r\n//                         </form>\r\n//                     </div>\r\n//                 </section>\r\n//             </ContainerHome>\r\n//             <Footer />\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default Cadastro;\r\n\r\n// Cadastro.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport styles from './Cadastro.module.css';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\n\r\nfunction Cadastro() {\r\n    const navigate = useNavigate();\r\n\r\n    const [formData, setFormData] = useState({\r\n        nome: '',\r\n        cpf: '',\r\n        email: '',\r\n        telefone: '',\r\n        senha: '',\r\n        confirmarSenha: ''\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [submitStatus, setSubmitStatus] = useState({});\r\n    const [isSidebarVisible, setSidebarVisible] = useState(false);\r\n\r\n    const toggleSidebar = () => setSidebarVisible(!isSidebarVisible);\r\n\r\n    const formatCPF = (value) => {\r\n        return value\r\n            .replace(/\\D/g, '')\r\n            .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n            .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n            .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n            .replace(/(-\\d{2})\\d+?$/, '$1');\r\n    };\r\n\r\n    const formatTelefone = (value) => {\r\n        return value\r\n            .replace(/\\D/g, '')\r\n            .replace(/(\\d{2})(\\d)/, '($1) $2')\r\n            .replace(/(\\d{5})(\\d)/, '$1-$2')\r\n            .replace(/(-\\d{4})\\d+?$/, '$1');\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { id, value } = e.target;\r\n        const formattedValue = id === 'cpf' ? formatCPF(value) : id === 'telefone' ? formatTelefone(value) : value;\r\n        setFormData((prev) => ({ ...prev, [id]: formattedValue }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:3001/usuarios', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    ...formData,\r\n                    cpf: formData.cpf.replace(/\\D/g, ''),\r\n                    telefone: formData.telefone.replace(/\\D/g, '')\r\n                })\r\n            });\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setSubmitStatus({ message: 'Cadastro realizado com sucesso!', type: 'success' });\r\n                setTimeout(() => navigate('/login'), 2000);\r\n            } else {\r\n                throw new Error(data.error || 'Erro ao realizar cadastro');\r\n            }\r\n        } catch (error) {\r\n            setSubmitStatus({ message: error.message || 'Erro ao conectar com o servidor', type: 'error' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div toggleSidebar={toggleSidebar} />\r\n            <div className={`${styles.overlay} ${isSidebarVisible ? styles.overlayVisible : ''}`} onClick={toggleSidebar}></div>\r\n            <div className={`${styles.sidebar} ${isSidebarVisible ? styles.sidebarVisible : ''}`}>\r\n                <div className={styles.sidebarHeader}>\r\n                    <Link to=\"/\" className={styles.closeButton} onClick={toggleSidebar}>×</Link>\r\n                    <h2 className={styles.title}>Cadastro</h2>\r\n                </div>\r\n                {submitStatus.message && <div className={`${styles.statusMessage} ${styles[submitStatus.type]}`}>{submitStatus.message}</div>}\r\n                <form onSubmit={handleSubmit} className={styles.cadastroForm}>\r\n                    {['nome', 'cpf', 'email', 'telefone', 'senha', 'confirmarSenha'].map((field) => (\r\n                        <div className={styles.formGroup} key={field}>\r\n                            <label htmlFor={field}>{field.charAt(0).toUpperCase() + field.slice(1)}:</label>\r\n                            <input\r\n                                type={field === 'senha' || field === 'confirmarSenha' ? 'password' : 'text'}\r\n                                id={field}\r\n                                value={formData[field]}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                            />\r\n                            {errors[field] && <span className={styles.errorText}>{errors[field]}</span>}\r\n                        </div>\r\n                    ))}\r\n                    <button type=\"submit\" className={styles.submitButton}>Cadastrar</button>\r\n                </form>\r\n            </div>\r\n          \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Cadastro;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,MAAM,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC;IACrCe,IAAI,EAAE,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,cAAc,EAAE;EACpB,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACyB,gBAAgB,EAAEC,iBAAiB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM2B,aAAa,GAAGA,CAAA,KAAMD,iBAAiB,CAAC,CAACD,gBAAgB,CAAC;EAEhE,MAAMG,SAAS,GAAIC,KAAK,IAAK;IACzB,OAAOA,KAAK,CACPC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAC/BA,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAC/BA,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CACpCA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;EACvC,CAAC;EAED,MAAMC,cAAc,GAAIF,KAAK,IAAK;IAC9B,OAAOA,KAAK,CACPC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CACjCA,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAC/BA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;EACvC,CAAC;EAED,MAAME,iBAAiB,GAAIC,CAAC,IAAK;IAC7B,MAAM;MAAEC,EAAE;MAAEL;IAAM,CAAC,GAAGI,CAAC,CAACE,MAAM;IAC9B,MAAMC,cAAc,GAAGF,EAAE,KAAK,KAAK,GAAGN,SAAS,CAACC,KAAK,CAAC,GAAGK,EAAE,KAAK,UAAU,GAAGH,cAAc,CAACF,KAAK,CAAC,GAAGA,KAAK;IAC1Gf,WAAW,CAAEuB,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACH,EAAE,GAAGE;IAAe,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED,MAAME,YAAY,GAAG,MAAOL,CAAC,IAAK;IAC9BA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB,GAAGjC,QAAQ;UACXG,GAAG,EAAEH,QAAQ,CAACG,GAAG,CAACc,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;UACpCZ,QAAQ,EAAEL,QAAQ,CAACK,QAAQ,CAACY,OAAO,CAAC,KAAK,EAAE,EAAE;QACjD,CAAC;MACL,CAAC,CAAC;MACF,MAAMiB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACbzB,eAAe,CAAC;UAAE0B,OAAO,EAAE,iCAAiC;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC;QAChFC,UAAU,CAAC,MAAMxC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC;MAC9C,CAAC,MAAM;QACH,MAAM,IAAIyC,KAAK,CAACN,IAAI,CAACO,KAAK,IAAI,2BAA2B,CAAC;MAC9D;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZ9B,eAAe,CAAC;QAAE0B,OAAO,EAAEI,KAAK,CAACJ,OAAO,IAAI,iCAAiC;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC;IACnG;EACJ,CAAC;EAED,oBACI5C,OAAA,CAAAE,SAAA;IAAA8C,QAAA,gBACIhD,OAAA;MAAKoB,aAAa,EAAEA;IAAc;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCpD,OAAA;MAAKqD,SAAS,EAAE,GAAGzD,MAAM,CAAC0D,OAAO,IAAIpC,gBAAgB,GAAGtB,MAAM,CAAC2D,cAAc,GAAG,EAAE,EAAG;MAACC,OAAO,EAAEpC;IAAc;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpHpD,OAAA;MAAKqD,SAAS,EAAE,GAAGzD,MAAM,CAAC6D,OAAO,IAAIvC,gBAAgB,GAAGtB,MAAM,CAAC8D,cAAc,GAAG,EAAE,EAAG;MAAAV,QAAA,gBACjFhD,OAAA;QAAKqD,SAAS,EAAEzD,MAAM,CAAC+D,aAAc;QAAAX,QAAA,gBACjChD,OAAA,CAACN,IAAI;UAACkE,EAAE,EAAC,GAAG;UAACP,SAAS,EAAEzD,MAAM,CAACiE,WAAY;UAACL,OAAO,EAAEpC,aAAc;UAAA4B,QAAA,EAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5EpD,OAAA;UAAIqD,SAAS,EAAEzD,MAAM,CAACkE,KAAM;UAAAd,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,EACLpC,YAAY,CAAC2B,OAAO,iBAAI3C,OAAA;QAAKqD,SAAS,EAAE,GAAGzD,MAAM,CAACmE,aAAa,IAAInE,MAAM,CAACoB,YAAY,CAAC4B,IAAI,CAAC,EAAG;QAAAI,QAAA,EAAEhC,YAAY,CAAC2B;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC7HpD,OAAA;QAAMgE,QAAQ,EAAEjC,YAAa;QAACsB,SAAS,EAAEzD,MAAM,CAACqE,YAAa;QAAAjB,QAAA,GACxD,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAACkB,GAAG,CAAEC,KAAK,iBACvEnE,OAAA;UAAKqD,SAAS,EAAEzD,MAAM,CAACwE,SAAU;UAAApB,QAAA,gBAC7BhD,OAAA;YAAOqE,OAAO,EAAEF,KAAM;YAAAnB,QAAA,GAAEmB,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,EAAC,GAAC;UAAA;YAAAvB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChFpD,OAAA;YACI4C,IAAI,EAAEuB,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,gBAAgB,GAAG,UAAU,GAAG,MAAO;YAC5ExC,EAAE,EAAEwC,KAAM;YACV7C,KAAK,EAAEhB,QAAQ,CAAC6D,KAAK,CAAE;YACvBM,QAAQ,EAAEhD,iBAAkB;YAC5BiD,QAAQ;UAAA;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX,CAAC,EACDtC,MAAM,CAACqD,KAAK,CAAC,iBAAInE,OAAA;YAAMqD,SAAS,EAAEzD,MAAM,CAAC+E,SAAU;YAAA3B,QAAA,EAAElC,MAAM,CAACqD,KAAK;UAAC;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GATxCe,KAAK;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUvC,CACR,CAAC,eACFpD,OAAA;UAAQ4C,IAAI,EAAC,QAAQ;UAACS,SAAS,EAAEzD,MAAM,CAACgF,YAAa;UAAA5B,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA,eAER,CAAC;AAEX;AAAChD,EAAA,CA/FQD,QAAQ;EAAA,QACIR,WAAW;AAAA;AAAAkF,EAAA,GADvB1E,QAAQ;AAiGjB,eAAeA,QAAQ;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}